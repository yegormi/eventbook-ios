openapi: 3.0.0
paths:
  /signup:
    post:
      operationId: signup
      summary: Sign up
      tags:
        - auth
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequestDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupResponseDto'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
  /login:
    post:
      operationId: login
      summary: Log in
      tags:
        - auth
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponseDto'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
  /me:
    get:
      operationId: getMe
      summary: Get the current user
      tags:
        - user
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
      security:
        - bearer: []
    delete:
      operationId: deleteMe
      summary: Delete the current user
      tags:
        - user
      parameters: []
      responses:
        '200':
          description: ''
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
      security:
        - bearer: []
info:
  title: EventBook API
  description: REST API for EventBook
  version: '1.0'
  contact: {}
tags: []
servers:
  - url: https://api.eventbook.pp.ua
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    SignupRequestDto:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - email
        - password
    UserDto:
      type: object
      properties:
        id:
          type: string
          example: 66c6fab4f13bf5134c167e8b
          description: The id of the user
        email:
          type: string
          example: johndoe@example.com
          format: email
          description: The email of the user
          nullable: true
        fullName:
          type: string
          example: John Doe
          description: The full name of the user
          nullable: true
        phoneNumber:
          type: string
          example: '+1234567890'
          description: The phone number of the user
          nullable: true
        avatar:
          type: string
          example: https://example.com/avatar.jpg
          description: The avatar URL of the user
          nullable: true
      required:
        - id
        - email
        - fullName
        - phoneNumber
        - avatar
    SignupResponseDto:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsIn
        user:
          $ref: '#/components/schemas/UserDto'
      required:
        - accessToken
        - user
    ApiErrorDto:
      type: object
      properties:
        code:
          type: string
          description: The error code
          example: entity-not-found
          enum:
            - internal
            - unauthorized
            - entity-not-found
            - email-not-unique
        message:
          type: string
          description: A human-readable message describing the error
          example: Entity not found
        details:
          type: object
          description: Additional details about the error
          example:
            entity: User
      required:
        - message
    LoginRequestDto:
      type: object
      properties:
        idToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsIn
      required:
        - idToken
    LoginResponseDto:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsIn
        user:
          $ref: '#/components/schemas/UserDto'
      required:
        - accessToken
        - user
